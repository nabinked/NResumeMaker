
@using ResumeMaker.Controllers
@using ResumeMaker.Enums
@model IEnumerable<ResumeMaker.Data.Models.Core.Skill>

<div id="SkillViewWrapper" class="form-toggle-wrapper col-sm-12">
    <div id="SkillView" class="form-toggle">
        <h3>
            Skills
            <small>
                @Component.Invoke("CudAction", typeof(SkillController), nameof(SkillController.GetFormForSaveAndUpdate),
                                "SkillViewWrapper", new { id = 0, returnUrl = ViewHelper.CurrentUrl }, CudTypeEnum.Create, "")
            </small>
        </h3>


        @if (Model.Any())
        {
            <div id="SkillsDiv">
                @foreach (var skill in Model)
                {
                    if (skill.Proficiency <= 0)
                    {
                        continue;
                    }
                    <div class="col-sm-2">
                        @skill.SkillName
                    </div>
                    <div class="col-sm-10">
                        <rating class="inline-block" rating="@skill.Proficiency" size-class="small-star"></rating>
                        <div style="display: inline;vertical-align: super">
                            @Component.Invoke("CudAction", typeof(SkillController), nameof(SkillController.GetFormForSaveAndUpdate),
                                "SkillViewWrapper", new { id = skill.Id, returnUrl = ViewHelper.CurrentUrl }, CudTypeEnum.Update, "")

                            @Component.Invoke("CudAction", typeof(SkillController), nameof(SkillController.Delete), skill.Id)
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            @Component.Invoke("CudAction", typeof(SkillController), nameof(SkillController.GetFormForSaveAndUpdate),
                                "SkillViewWrapper", new { id = 0, returnUrl = ViewHelper.CurrentUrl }, CudTypeEnum.Create, "Add Skills")

        }
    </div>
</div>